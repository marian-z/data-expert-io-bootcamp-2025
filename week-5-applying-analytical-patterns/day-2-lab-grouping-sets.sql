-- The datasets that we are going to be working with today
SELECT *
FROM bootcamp.web_events w
JOIN bootcamp.devices d ON w.device_id = d.device_id

-- GROUPING SETS example
-- The COALESCE parts are vital here, because otherwise the GROUPING SET would run into troubles if it would try grouping on columns with NULL values
-- It is generally a good practice to convert the columns you are going to be GROUPING BY to Strings
WITH mapped AS(
SELECT
	CASE
		WHEN host LIKE '%techcreator%' THEN 'TechCreator.io'
		WHEN host LIKE '%eczachly%' THEN 'EcZachly.com'
		WHEN host LIKE '%zachwilson%' THEN 'ZachWilson.tech'
		WHEN host LIKE '%dataengineer%' THEN 'DataEngineer.io'
		ELSE COALESCE(host, 'unknown')
	END AS host,
	COALESCE(browser_type, 'unknown') AS browser_type,
	CASE 
		WHEN device_type LIKE '%Samsung%' THEN 'Samsung' ELSE COALESCE(device_type, 'unknown')
	END AS device_type,
	COALESCE(os_type, 'unknown') AS os_type,
	COALESCE(url, 'unknown') AS url
FROM bootcamp.web_events w
JOIN bootcamp.devices d ON w.device_id = d.device_id
),
agged AS(
SELECT
	GROUPING(host), -- allows us TO see which columns were used IN the aggregation FOR the SPECIFIC ROW OF results (0 means the column was used). We could also CHANGE this TO a CHANGE WHEN clau
	GROUPING(browser_type),
	GROUPING(device_type),
	GROUPING(os_type),
	COALESCE(host, '(overall)') AS host, -- another COALESCE TO make sure we catch unexpected NULL VALUES introduced BY GROUPING SET
	COALESCE(browser_type, '(overall)') AS browser_type,
	COALESCE(device_type, '(overall)') AS device_type,
	COALESCE(os_type, '(overall)') AS os_type,
	COUNT(1) AS page_hits
FROM mapped
GROUP BY GROUPING SETS (
	(host, browser_type, device_type, os_type),
	(host), -- be careful because FOR this GROUPING example the other collumns will GET NULLed OUT
	(browser_type)
)
ORDER BY COUNT(1) DESC
)
SELECT *
FROM agged

-- We can use the query below to check all the combinations that were generated by our GROUPING SET
WITH mapped AS(
SELECT
	CASE
		WHEN host LIKE '%techcreator%' THEN 'TechCreator.io'
		WHEN host LIKE '%eczachly%' THEN 'EcZachly.com'
		WHEN host LIKE '%zachwilson%' THEN 'ZachWilson.tech'
		WHEN host LIKE '%dataengineer%' THEN 'DataEngineer.io'
		ELSE COALESCE(host, 'unknown')
	END AS host,
	COALESCE(browser_type, 'unknown') AS browser_type,
	CASE 
		WHEN device_type LIKE '%Samsung%' THEN 'Samsung' ELSE COALESCE(device_type, 'unknown')
	END AS device_type,
	COALESCE(os_type, 'unknown') AS os_type,
	COALESCE(url, 'unknown') AS url
FROM bootcamp.web_events w
JOIN bootcamp.devices d ON w.device_id = d.device_id
),
agged AS(SELECT
	COALESCE(host, '(overall)') AS host, -- another COALESCE TO make sure we catch unexpected NULL VALUES introduced BY GROUPING SET
	COALESCE(browser_type, '(overall)') AS browser_type,
	COALESCE(device_type, '(overall)') AS device_type,
	COALESCE(os_type, '(overall)') AS os_type,
	COUNT(1) AS page_hits
FROM mapped
GROUP BY GROUPING SETS (
	(host, browser_type, device_type, os_type),
	(host), -- be careful because FOR this GROUPING example the other collumns will GET NULLed OUT
	(browser_type)
)
ORDER BY COUNT(1) DESC)
SELECT COUNT(1) AS combination_count
FROM agged

-- Just to compare, we can take the same query and use GROUP BY CUBE to see how the number of combinations increase even if its going to have the same cuts of data
WITH mapped AS(
SELECT
	CASE
		WHEN host LIKE '%techcreator%' THEN 'TechCreator.io'
		WHEN host LIKE '%eczachly%' THEN 'EcZachly.com'
		WHEN host LIKE '%zachwilson%' THEN 'ZachWilson.tech'
		WHEN host LIKE '%dataengineer%' THEN 'DataEngineer.io'
		ELSE COALESCE(host, 'unknown')
	END AS host,
	COALESCE(browser_type, 'unknown') AS browser_type,
	CASE 
		WHEN device_type LIKE '%Samsung%' THEN 'Samsung' ELSE COALESCE(device_type, 'unknown')
	END AS device_type,
	COALESCE(os_type, 'unknown') AS os_type,
	COALESCE(url, 'unknown') AS url
FROM bootcamp.web_events w
JOIN bootcamp.devices d ON w.device_id = d.device_id
),
agged AS(SELECT
	COALESCE(host, '(overall)') AS host, -- another COALESCE TO make sure we catch unexpected NULL VALUES introduced BY GROUPING SET
	COALESCE(browser_type, '(overall)') AS browser_type,
	COALESCE(device_type, '(overall)') AS device_type,
	COALESCE(os_type, '(overall)') AS os_type,
	COUNT(1) AS page_hits
FROM mapped
GROUP BY CUBE (
	host, browser_type, device_type, os_type
)
ORDER BY COUNT(1) DESC)
SELECT COUNT(1) AS combination_count
FROM agged

-- GROUP BY ROLLUP example below
WITH mapped AS(
SELECT
	CASE
		WHEN host LIKE '%techcreator%' THEN 'TechCreator.io'
		WHEN host LIKE '%eczachly%' THEN 'EcZachly.com'
		WHEN host LIKE '%zachwilson%' THEN 'ZachWilson.tech'
		WHEN host LIKE '%dataengineer%' THEN 'DataEngineer.io'
		ELSE COALESCE(host, 'unknown')
	END AS host,
	COALESCE(browser_type, 'unknown') AS browser_type,
	CASE 
		WHEN device_type LIKE '%Samsung%' THEN 'Samsung' ELSE COALESCE(device_type, 'unknown')
	END AS device_type,
	COALESCE(os_type, 'unknown') AS os_type,
	COALESCE(url, 'unknown') AS url
FROM bootcamp.web_events w
JOIN bootcamp.devices d ON w.device_id = d.device_id
),
agged AS(SELECT
	COALESCE(host, '(overall)') AS host, -- another COALESCE TO make sure we catch unexpected NULL VALUES introduced BY GROUPING SET
	COALESCE(browser_type, '(overall)') AS browser_type,
	COALESCE(device_type, '(overall)') AS device_type,
	COALESCE(os_type, '(overall)') AS os_type,
	COUNT(1) AS page_hits
FROM mapped
GROUP BY ROLLUP (
	host, browser_type, device_type, os_type
)
ORDER BY COUNT(1) DESC)
SELECT *
FROM agged

-- GROUP BY CUBE example below demonstrates different way of defining our aggregation level as opposed to simply having the GROUPING columns display 0s
WITH mapped AS(
SELECT
	CASE
		WHEN host LIKE '%techcreator%' THEN 'TechCreator.io'
		WHEN host LIKE '%eczachly%' THEN 'EcZachly.com'
		WHEN host LIKE '%zachwilson%' THEN 'ZachWilson.tech'
		WHEN host LIKE '%dataengineer%' THEN 'DataEngineer.io'
		ELSE COALESCE(host, 'unknown')
	END AS host,
	COALESCE(browser_type, 'unknown') AS browser_type,
	CASE 
		WHEN device_type LIKE '%Samsung%' THEN 'Samsung' ELSE COALESCE(device_type, 'unknown')
	END AS device_type,
	COALESCE(os_type, 'unknown') AS os_type,
	COALESCE(url, 'unknown') AS url
FROM bootcamp.web_events w
JOIN bootcamp.devices d ON w.device_id = d.device_id
WHERE w.event_time BETWEEN DATE('2023-01-01') AND DATE('2023-12-31')
),
agged AS(
SELECT
	COALESCE(host, '(overall)') AS host, -- another COALESCE TO make sure we catch unexpected NULL VALUES introduced BY GROUPING SET
	COALESCE(browser_type, '(overall)') AS browser_type,
	COALESCE(device_type, '(overall)') AS device_type,
	COALESCE(os_type, '(overall)') AS os_type,
	COUNT(1) AS page_hits,
	DATE('2023-12-31') AS ds,
	ARRAY_JOIN(FILTER(ARRAY[
	CASE WHEN GROUPING(host) = 0 THEN 'host' END,
	CASE WHEN GROUPING(browser_type) = 0 THEN 'browser_type' END,
	CASE WHEN GROUPING(device_type) = 0 THEN 'device_type' END,
	CASE WHEN GROUPING(os_type) = 0 THEN 'os_type' END
	], x-> x IS NOT NULL), '__') AS agg_level
FROM mapped
GROUP BY CUBE (
	host, browser_type, device_type, os_type

)
ORDER BY COUNT(1) DESC
)
SELECT *
FROM agged

-- We are goint to use what we did above to create an OLAP cube
CREATE TABLE bt_learning.web_events_olap_cube(
	host VARCHAR,
	browser_type VARCHAR,
	device_type VARCHAR,
	os_type VARCHAR,
	page_hits BIGINT,
	ds DATE,
	agg_level VARCHAR
) WITH(
	format = 'PARQUET',
	partitioning = ARRAY['ds', 'agg_level'] -- note we ARE also partitioning ON agg level
)

-- Inserting data into olap cube
INSERT INTO bt_learning.web_events_olap_cube
WITH mapped AS(
SELECT
	CASE
		WHEN host LIKE '%techcreator%' THEN 'TechCreator.io'
		WHEN host LIKE '%eczachly%' THEN 'EcZachly.com'
		WHEN host LIKE '%zachwilson%' THEN 'ZachWilson.tech'
		WHEN host LIKE '%dataengineer%' THEN 'DataEngineer.io'
		ELSE COALESCE(host, 'unknown')
	END AS host,
	COALESCE(browser_type, 'unknown') AS browser_type,
	CASE 
		WHEN device_type LIKE '%Samsung%' THEN 'Samsung' ELSE COALESCE(device_type, 'unknown')
	END AS device_type,
	COALESCE(os_type, 'unknown') AS os_type,
	COALESCE(url, 'unknown') AS url
FROM bootcamp.web_events w
JOIN bootcamp.devices d ON w.device_id = d.device_id
WHERE w.event_time BETWEEN DATE('2023-01-01') AND DATE('2023-12-31')
),
agged AS(
SELECT
	COALESCE(host, '(overall)') AS host, -- another COALESCE TO make sure we catch unexpected NULL VALUES introduced BY GROUPING SET
	COALESCE(browser_type, '(overall)') AS browser_type,
	COALESCE(device_type, '(overall)') AS device_type,
	COALESCE(os_type, '(overall)') AS os_type,
	COUNT(1) AS page_hits,
	DATE('2023-12-31') AS ds,
	ARRAY_JOIN(FILTER(ARRAY[
	CASE WHEN GROUPING(host) = 0 THEN 'host' END,
	CASE WHEN GROUPING(browser_type) = 0 THEN 'browser_type' END,
	CASE WHEN GROUPING(device_type) = 0 THEN 'device_type' END,
	CASE WHEN GROUPING(os_type) = 0 THEN 'os_type' END
	], x-> x IS NOT NULL), '__') AS agg_level
	-- we generally want to do alphabetical order of columns inside this agg_level column so people know what possible combinations can there exist
	-- other approach could be to do this in the order which the columns show up in OLAP cube, the argument for this approach is that alphabetical order gives unnecessary weight to columns that are not really used
FROM mapped
GROUP BY CUBE (
	host, browser_type, device_type, os_type

)
ORDER BY COUNT(1) DESC
)
SELECT *
FROM agged

-- Testing query speed when querying on a column used in partitions
-- The OLAP cube that we created above is generally what we want our dashboards to use, because it already contains all the possible aggregations of the data and the dashboard tool does not need to do any aggregations which would slow the dashboard down
-- We don't want our dashboards to use any GROUP BYs
SELECT *
FROM bt_learning.web_events_olap_cube
WHERE agg_level = 'host__browser_type'

-- Example below showcases window functions that we could use to see users first and last action on a given date, as well as other useful stats calculated by window functions such as sum of all his actions per date etc.
WITH mapped AS(
SELECT
	CASE
		WHEN host LIKE '%techcreator%' THEN 'TechCreator.io'
		WHEN host LIKE '%eczachly%' THEN 'EcZachly.com'
		WHEN host LIKE '%zachwilson%' THEN 'ZachWilson.tech'
		WHEN host LIKE '%dataengineer%' THEN 'DataEngineer.io'
		ELSE COALESCE(host, 'unknown')
	END AS host,
	COALESCE(browser_type, 'unknown') AS browser_type,
	CASE 
		WHEN device_type LIKE '%Samsung%' THEN 'Samsung' ELSE COALESCE(device_type, 'unknown')
	END AS device_type,
	COALESCE(os_type, 'unknown') AS os_type,
	DATE(event_time) AS event_date,
	user_id,
	event_time,
	COALESCE(url, 'unknown') AS url
FROM bootcamp.web_events w
JOIN bootcamp.devices d ON w.device_id = d.device_id
WHERE w.event_time BETWEEN DATE('2023-01-01') AND DATE('2023-12-31')
),
windowed AS(
SELECT
	user_id,
	event_time,
	FIRST_VALUE(event_time) OVER (PARTITION BY user_id, event_date ORDER BY event_time ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS first_action_on_date,
	LAST_VALUE(event_time) OVER (PARTITION BY user_id, event_date ORDER BY event_time ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS last_action_on_date,
	COUNT(event_time) OVER (PARTITION BY user_id, event_date ORDER BY event_time ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS total_events_today
FROM mapped
)
SELECT
	*,
	DATE_DIFF('minute', first_action_on_date, event_time)
FROM windowed
